// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go
//
// Generated by this command:
//
//	mockgen -source=contract.go -destination=contract_mock_test.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	model "gymondo/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetProduct mocks base method.
func (m *MockRepository) GetProduct(ctx context.Context, productID string) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", ctx, productID)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockRepositoryMockRecorder) GetProduct(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockRepository)(nil).GetProduct), ctx, productID)
}

// GetProducts mocks base method.
func (m *MockRepository) GetProducts(ctx context.Context) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockRepositoryMockRecorder) GetProducts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockRepository)(nil).GetProducts), ctx)
}

// GetSubscription mocks base method.
func (m *MockRepository) GetSubscription(ctx context.Context, subscriptionID string) (model.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", ctx, subscriptionID)
	ret0, _ := ret[0].(model.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription.
func (mr *MockRepositoryMockRecorder) GetSubscription(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockRepository)(nil).GetSubscription), ctx, subscriptionID)
}

// GetUser mocks base method.
func (m *MockRepository) GetUser(ctx context.Context, userID string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userID)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepositoryMockRecorder) GetUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepository)(nil).GetUser), ctx, userID)
}

// GetVoucherByCode mocks base method.
func (m *MockRepository) GetVoucherByCode(ctx context.Context, voucherCode string) (model.Voucher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoucherByCode", ctx, voucherCode)
	ret0, _ := ret[0].(model.Voucher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoucherByCode indicates an expected call of GetVoucherByCode.
func (mr *MockRepositoryMockRecorder) GetVoucherByCode(ctx, voucherCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoucherByCode", reflect.TypeOf((*MockRepository)(nil).GetVoucherByCode), ctx, voucherCode)
}

// SaveSubscription mocks base method.
func (m *MockRepository) SaveSubscription(ctx context.Context, subscription model.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSubscription", ctx, subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSubscription indicates an expected call of SaveSubscription.
func (mr *MockRepositoryMockRecorder) SaveSubscription(ctx, subscription any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSubscription", reflect.TypeOf((*MockRepository)(nil).SaveSubscription), ctx, subscription)
}

// UpdateSubscription mocks base method.
func (m *MockRepository) UpdateSubscription(ctx context.Context, subscription model.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscription", ctx, subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockRepositoryMockRecorder) UpdateSubscription(ctx, subscription any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockRepository)(nil).UpdateSubscription), ctx, subscription)
}
