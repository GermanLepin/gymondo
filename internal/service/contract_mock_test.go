// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go
//
// Generated by this command:
//
//	mockgen -source=contract.go -destination=contract_mock_test.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	model "gymondo/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockproductRepository is a mock of productRepository interface.
type MockproductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockproductRepositoryMockRecorder
}

// MockproductRepositoryMockRecorder is the mock recorder for MockproductRepository.
type MockproductRepositoryMockRecorder struct {
	mock *MockproductRepository
}

// NewMockproductRepository creates a new mock instance.
func NewMockproductRepository(ctrl *gomock.Controller) *MockproductRepository {
	mock := &MockproductRepository{ctrl: ctrl}
	mock.recorder = &MockproductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproductRepository) EXPECT() *MockproductRepositoryMockRecorder {
	return m.recorder
}

// FindOne mocks base method.
func (m *MockproductRepository) Get(ctx context.Context, productID string) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, productID)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockproductRepositoryMockRecorder) FindOne(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockproductRepository)(nil).Get), ctx, productID)
}
