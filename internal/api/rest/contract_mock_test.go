// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go
//
// Generated by this command:
//
//	mockgen -source=contract.go -destination=contract_mock_test.go -package=rest
//

// Package rest is a generated GoMock package.
package rest

import (
	context "context"
	model "gymondo/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mockservice is a mock of service interface.
type Mockservice struct {
	ctrl     *gomock.Controller
	recorder *MockserviceMockRecorder
}

// MockserviceMockRecorder is the mock recorder for Mockservice.
type MockserviceMockRecorder struct {
	mock *Mockservice
}

// NewMockservice creates a new mock instance.
func NewMockservice(ctrl *gomock.Controller) *Mockservice {
	mock := &Mockservice{ctrl: ctrl}
	mock.recorder = &MockserviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockservice) EXPECT() *MockserviceMockRecorder {
	return m.recorder
}

// CancelSubscription mocks base method.
func (m *Mockservice) CancelSubscription(ctx context.Context, subscriptionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSubscription", ctx, subscriptionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelSubscription indicates an expected call of CancelSubscription.
func (mr *MockserviceMockRecorder) CancelSubscription(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSubscription", reflect.TypeOf((*Mockservice)(nil).CancelSubscription), ctx, subscriptionID)
}

// FindProduct mocks base method.
func (m *Mockservice) FindProduct(ctx context.Context, productID string) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProduct", ctx, productID)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProduct indicates an expected call of FindProduct.
func (mr *MockserviceMockRecorder) FindProduct(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProduct", reflect.TypeOf((*Mockservice)(nil).FindProduct), ctx, productID)
}

// FindProducts mocks base method.
func (m *Mockservice) FindProducts(ctx context.Context) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProducts", ctx)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProducts indicates an expected call of FindProducts.
func (mr *MockserviceMockRecorder) FindProducts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProducts", reflect.TypeOf((*Mockservice)(nil).FindProducts), ctx)
}

// FindProductsWithVoucher mocks base method.
func (m *Mockservice) FindProductsWithVoucher(ctx context.Context, voucherCode string) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductsWithVoucher", ctx, voucherCode)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProductsWithVoucher indicates an expected call of FindProductsWithVoucher.
func (mr *MockserviceMockRecorder) FindProductsWithVoucher(ctx, voucherCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductsWithVoucher", reflect.TypeOf((*Mockservice)(nil).FindProductsWithVoucher), ctx, voucherCode)
}

// FindSubscription mocks base method.
func (m *Mockservice) FindSubscription(ctx context.Context, subscriptionID string) (model.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSubscription", ctx, subscriptionID)
	ret0, _ := ret[0].(model.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSubscription indicates an expected call of FindSubscription.
func (mr *MockserviceMockRecorder) FindSubscription(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubscription", reflect.TypeOf((*Mockservice)(nil).FindSubscription), ctx, subscriptionID)
}

// PauseSubscription mocks base method.
func (m *Mockservice) PauseSubscription(ctx context.Context, subscriptionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseSubscription", ctx, subscriptionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PauseSubscription indicates an expected call of PauseSubscription.
func (mr *MockserviceMockRecorder) PauseSubscription(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseSubscription", reflect.TypeOf((*Mockservice)(nil).PauseSubscription), ctx, subscriptionID)
}

// Subscribe mocks base method.
func (m *Mockservice) Subscribe(ctx context.Context, userID, productID, voucherCode string, trialPeriod bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, userID, productID, voucherCode, trialPeriod)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockserviceMockRecorder) Subscribe(ctx, userID, productID, voucherCode, trialPeriod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*Mockservice)(nil).Subscribe), ctx, userID, productID, voucherCode, trialPeriod)
}

// UnpauseSubscription mocks base method.
func (m *Mockservice) UnpauseSubscription(ctx context.Context, subscriptionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpauseSubscription", ctx, subscriptionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnpauseSubscription indicates an expected call of UnpauseSubscription.
func (mr *MockserviceMockRecorder) UnpauseSubscription(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpauseSubscription", reflect.TypeOf((*Mockservice)(nil).UnpauseSubscription), ctx, subscriptionID)
}
