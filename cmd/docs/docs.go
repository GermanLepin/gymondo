// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/product/subscribe": {
            "post": {
                "description": "Allows users to subscribe to a product. This endpoint creates a new subscription for a user, including selecting a product and setting the subscription parameters (e.g., trial period, voucher code).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Subscribe to a product",
                "parameters": [
                    {
                        "description": "Subscription Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.SubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.SubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/product/{product_id}": {
            "get": {
                "description": "Retrieves detailed information about a specific product using the unique product_id. This includes pricing, description, and other attributes.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Get a specific product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "product_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Product"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/products": {
            "get": {
                "description": "Retrieves a list of all available products. This endpoint provides information about the products that users can subscribe to.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get all products",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Product"
                            }
                        }
                    },
                    "404": {
                        "description": "Products not found",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/products/{voucher_code}": {
            "get": {
                "description": "Fetches details of a specific product associated with a given voucher code. The voucher code is used to apply discounts or offers to the product.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get all products with a voucher",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Voucher Code",
                        "name": "voucher_code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Product"
                            }
                        }
                    },
                    "404": {
                        "description": "Products with voucher not found",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/subscription/{subscription_id}": {
            "get": {
                "description": "Provides details of an active subscription. The subscription_id is used to fetch information about a specific subscription, such as its status, start date, end date, and other relevant information.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscription"
                ],
                "summary": "Get subscription details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Subscription"
                        }
                    },
                    "404": {
                        "description": "Subscription not found",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/subscription/{subscription_id}/manage": {
            "post": {
                "description": "Manages an existing subscription. This endpoint allows users to update or modify their subscription, such as pausing, canceling, or changing other settings related to the subscription.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscription"
                ],
                "summary": "Manage subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Manage Action",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.ManageSubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.ManageSubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid action",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/rest.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Product": {
            "type": "object",
            "properties": {
                "duration_days": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "tax": {
                    "type": "number"
                },
                "total_price": {
                    "type": "number"
                }
            }
        },
        "model.Subscription": {
            "type": "object",
            "properties": {
                "canceled_date": {
                    "type": "string"
                },
                "duration_days": {
                    "type": "integer"
                },
                "end_date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "paused_date": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "product_id": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/model.SubscriptionStatus"
                },
                "tax": {
                    "type": "number"
                },
                "total_price": {
                    "type": "number"
                },
                "trial_end_date": {
                    "type": "string"
                },
                "trial_start_date": {
                    "type": "string"
                },
                "unpaused_date": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "model.SubscriptionStatus": {
            "type": "string",
            "enum": [
                "active",
                "paused",
                "canceled"
            ],
            "x-enum-varnames": [
                "Active",
                "Paused",
                "Canceled"
            ]
        },
        "rest.ErrorResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "rest.ManageSubscriptionRequest": {
            "type": "object",
            "required": [
                "action"
            ],
            "properties": {
                "action": {
                    "type": "string"
                }
            }
        },
        "rest.ManageSubscriptionResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "subscription_id": {
                    "type": "string"
                }
            }
        },
        "rest.SubscriptionRequest": {
            "type": "object",
            "required": [
                "product_id",
                "user_id"
            ],
            "properties": {
                "product_id": {
                    "type": "string"
                },
                "trial_period": {
                    "type": "boolean"
                },
                "user_id": {
                    "type": "string"
                },
                "voucher_code": {
                    "type": "string"
                }
            }
        },
        "rest.SubscriptionResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "subscription_id": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
